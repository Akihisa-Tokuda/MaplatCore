


    ol.source.setCustomInitialize = function(self, options) {
        self.sourceID = options.sourceID;
        self.map_option = options.map_option || {};
        self.home_position = options.home_position;
        self.merc_zoom = options.merc_zoom;
        self.thumbnail = options.thumbnail || './tmbs/' + (options.mapID || options.sourceID) + '_menu.jpg';
        self.label = options.label;
        self.maxZoom = options.maxZoom;
        self.minZoom = options.minZoom;
        if (options.envelopeLngLats || options.envelopLngLats) {
            var lngLats = options.envelopeLngLats || options.envelopLngLats;
            var mercs = lngLats.map(function(lnglat){
                return ol.proj.transform(lnglat, 'EPSG:4326', 'EPSG:3857');
            });
            mercs.push(mercs[0]);
            self.envelope = turf.helpers.polygon([mercs]);
            self.centroid = turf.centroid(self.envelope).geometry.coordinates;
        }

        for (var i = 0; i < ol.source.META_KEYS.length; i++) {
            var key = ol.source.META_KEYS[i];
            self[key] = options[key];
        }

        var cacheWait = options.cache_enable ? self.setupTileCacheAsnyc() : Promise.resolve();
        var poisWait = self.resolvePois(options.pois);
        self.initialWait = Promise.all([cacheWait, poisWait]);
    };

    ol.source.NowMap = function(optOptions) {
        var options = optOptions || {};
        if (!options.imageExtention) options.imageExtention = 'jpg';
        if (options.mapID) {
            this.mapID = options.mapID;
            if (options.mapID != 'osm') {
                options.url = options.url ||
                    (options.tms ? 'tiles/' + options.mapID + '/{z}/{x}/{-y}.' + options.imageExtention :
                        'tiles/' + options.mapID + '/{z}/{x}/{y}.' + options.imageExtention);
            }
        }
        ol.source.OSM.call(this, options);
        ol.source.setCustomInitialize(this, options);
        ol.source.setupTileLoadFunction(this);
    };
    ol.inherits(ol.source.NowMap, ol.source.OSM);
    ol.source.NowMap.createAsync = function(options) {
        return new Promise(function(resolve, reject) {
            var obj = new ol.source.NowMap(options);
            resolve(obj);
        }).catch(function(err) { throw err; });
    };
    ol.source.setCustomFunction(ol.source.NowMap);
    ol.source.NowMap.prototype.xy2MercAsync = function(xy) {
        return new Promise(function(resolve, reject) {
            resolve(xy);
        }).catch(function(err) { throw err; });
    };
    ol.source.NowMap.prototype.merc2XyAsync = function(merc) {
        return new Promise(function(resolve, reject) {
            resolve(merc);
        });
    };

    ol.source.NowMap.prototype.insideCheckXy = function(xy) {
        if (!this.envelope) return true;
        var point = turf.helpers.point(xy);
        return turf.booleanPointInPolygon(point, this.envelope);
    };

    ol.source.NowMap.prototype.insideCheckHistMapCoords = function(histCoords) {
        return this.insideCheckXy(histCoords);
    };

    ol.source.NowMap.prototype.modulateXyInside = function(xy) {
        if (!this.centroid) return xy;
        var expandLine = turf.lineString([xy, this.centroid]);
        var intersect = turf.lineIntersect(this.envelope, expandLine);
        if (intersect.features.length > 0 && intersect.features[0].geometry) {
            return intersect.features[0].geometry.coordinates;
        } else {
            return xy;
        }
    };

    ol.source.NowMap.prototype.modulateHistMapCoordsInside = function(histCoords) {
        return this.modulateXyInside(histCoords);
    };

    ol.source.TmsMap = function(optOptions) {
        var options = optOptions || {};
        ol.source.NowMap.call(this, options);
    };
    ol.inherits(ol.source.TmsMap, ol.source.NowMap);
    ol.source.TmsMap.createAsync = function(options) {
        var promise = new Promise(function(resolve, reject) {
            var obj = new ol.source.TmsMap(options);
            resolve(obj);
        });
        return promise.catch(function(err) { throw err; });
    };

    ol.MaplatMap = function(optOptions) {
        optOptions = optOptions || {};
        var vectorLayer = new ol.layer.Vector({
            source: new ol.source.Vector({
                wrapX: false
            })
        });
        vectorLayer.set('name', 'gps');

        var markerLayer = new ol.layer.Vector({
            source: new ol.source.Vector({
                wrapX: false
            })
        });
        markerLayer.set('name', 'marker');

        var featureLayer = new ol.layer.Vector({
            source: new ol.source.Vector({
                wrapX: false
            })
        });
        featureLayer.set('name', 'feature');

        var envelopeLayer = new ol.layer.Vector({
            source: new ol.source.Vector({
                wrapX: false
            })
        });
        envelopeLayer.set('name', 'envelope');

        var baseLayer = optOptions.baseLayer ? optOptions.baseLayer :
            new ol.layer.Tile({
                source: optOptions.source
            });
        baseLayer.set('name', 'base');

        var overlayLayer = this._overlay_group = new ol.layer.Group();
        overlayLayer.set('name', 'overlay');

        var controls = optOptions.controls ? optOptions.controls : [];

        var options = {
            controls: controls,
            layers: [
                baseLayer,
                overlayLayer,
                envelopeLayer,
                featureLayer,
                vectorLayer,
                markerLayer
            ],
            target: optOptions.div,
            view: new ol.View({
                center: optOptions.default_center || [0, 0],
                zoom: optOptions.default_zoom || 2,
                rotation: optOptions.default_rotation || 0
            })
        };
        if (optOptions.interactions) {
            options.interactions = optOptions.interactions;
        }

        ol.Map.call(this, options);
        this.fake_gps = optOptions.fake_gps;
        this.fake_radius = optOptions.fake_radius;
        this.home_position = optOptions.home_position;

        var view = this.getView();
        var self = this;
        self.__AvoidFirstMoveStart = true;
        var movestart = function() {
            if (!self.__AvoidFirstMoveStart) self.dispatchEvent('movestart');
            self.__AvoidFirstMoveStart = false;
            view.un('propertychange', movestart);
        };
        view.on('propertychange', movestart);
        self.on('moveend', function() {
            view.on('propertychange', movestart);
        });
    };
    ol.inherits(ol.MaplatMap, ol.Map);

    ol.MaplatMap.prototype.getLayer = function(name) {
        if (!name) name = 'base';
        var recur = function(layers) {
            var filtered = layers.getArray().map(function(layer) {
                if (layer.get('name') == name) return layer;
                if (layer.getLayers) return recur(layer.getLayers());
                return;
            }).filter(function(layer) {
                return layer;
            });
            if (filtered.length == 0) return;
            return filtered[0];
        };
        return recur(this.getLayers());
    };

    ol.MaplatMap.prototype.getSource = function(name) {
        var layer = this.getLayer(name);
        if (!layer) return;
        return layer.getSource();
    };

    ol.MaplatMap.prototype.setFeature = function(data, style, layer) {
        var src = this.getSource(layer);
        var feature = new ol.Feature(data);
        if (style) {
            feature.setStyle(style);
        }
        src.addFeature(feature);
        return feature;
    };

    ol.MaplatMap.prototype.removeFeature = function(feature, layer) {
        var src = this.getSource(layer);
        src.removeFeature(feature);
    };

    ol.MaplatMap.prototype.resetFeature = function(layer) {
        var src = this.getSource(layer);
        src.clear();
    };

    ol.MaplatMap.prototype.setGPSPosition = function(pos, type) {
        var style = type == 'sub' ? gpsSubStyle : type == 'hide' ? gpsHideStyle : gpsStyle;
        if (type != 'sub') {
            this.resetFeature('gps');
        }
        if (pos) {
            this.setFeature({
                geometry: new ol.geom.Point(pos.xy)
            }, style, 'gps');
            if (!type) {
                this.setFeature({
                    geometry: new ol.geom.Circle(pos.xy, pos.rad)
                }, accCircleStyle, 'gps');
            }
        }
    };

    ol.MaplatMap.prototype.setMarker = function(xy, data, markerStyle, layer) {
        if (!layer) layer = 'marker';
        data['geometry'] = new ol.geom.Point(xy);
        if (!markerStyle) markerStyle = markerDefaultStyle;
        else if (typeof markerStyle == 'string') {
            markerStyle = new ol.style.Style({
                image: new ol.style.Icon(({
                    anchor: [0.5, 1.0],
                    anchorXUnits: 'fraction',
                    anchorYUnits: 'fraction',
                    src: markerStyle
                }))
            });
        } else if (!(markerStyle instanceof ol.style.Style)) {
            markerStyle = new ol.style.Style({
                image: new ol.style.Icon((markerStyle))
            });
        }
        return this.setFeature(data, markerStyle, layer);
    };

    ol.MaplatMap.prototype.resetMarker = function(layer) {
        if (!layer) layer = 'marker';
        this.resetFeature(layer);
    };

    ol.MaplatMap.prototype.setLine = function(xys, stroke, layer) {
        if (!layer) layer = 'feature';
        var style = stroke != null ? new ol.style.Style({
            stroke: new ol.style.Stroke(stroke)
        }) : null;
        return this.setFeature({
            geometry: new ol.geom.LineString(xys),
            name: 'Line'
        }, style, layer);
    };

    ol.MaplatMap.prototype.resetLine = function(layer) {
        if (!layer) layer = 'feature';
        this.resetFeature(layer);
    };

    ol.MaplatMap.prototype.setEnvelope = function(xys, stroke, layer) {
        if (!layer) layer = 'envelope';
        return this.setLine(xys, stroke, layer);
    };

    ol.MaplatMap.prototype.removeEnvelope = function(feature, layer) {
        if (!layer) layer = 'envelope';
        this.removeFeature(feature, layer);
    };

    ol.MaplatMap.prototype.resetEnvelope = function(layer) {
        if (!layer) layer = 'envelope';
        this.resetFeature(layer);
    };

    ol.MaplatMap.prototype.setFillEnvelope = function(xys, stroke, fill, layer) {
        if (!layer) layer = 'envelope';
        var style = null;
        if (stroke != null || fill != null) {
            var option = {};
            if (stroke != null) option.stroke = new ol.style.Stroke(stroke);
            if (fill != null) option.fill = new ol.style.Fill(fill);
            style = new ol.style.Style(option);
        }
        return this.setFeature({
            geometry: new ol.geom.Polygon([xys]),
        }, style, layer);
    };

    ol.MaplatMap.prototype.exchangeSource = function(source) {
        var layers = this.getLayers();
        var layer = layers.item(0);
        layer.setSource(source);
        if (source) {
            source._map = this;
        }
    };

    ol.MaplatMap.prototype.setLayer = function(source) {
        var layers = this.getLayer('overlay').getLayers();
        layers.clear();
        if (source) {
            var layer = new ol.layer.Tile({
                source: source
            });
            layers.push(layer);
        }
    };

    ol.MaplatMap.prototype.setTransparency = function(percentage) {
        var opacity = (100 - percentage) / 100;
        var source = this.getSource();
        if (source instanceof ol.source.NowMap) {
            this.getLayers().item(0).setOpacity(1);
            this.getLayers().item(1).setOpacity(opacity);
        } else {
            this.getLayers().item(0).setOpacity(opacity);
        }
    };

    ol.MaplatMap.prototype.setGPSMarker = function(position, ignoreMove) {
        // alert("ol.MaplatMap.prototype.setGPSMarker");
        var source = this.getLayers().item(0).getSource();
        source.setGPSMarker(position, ignoreMove);
    };

    ol.MaplatMap.prototype.handleGPS = function(launch, avoidEventForOff) {
        if (launch) {
            this.dispatchEvent('gps_request');
            this._first_gps_request = true;
            if (!this.geolocation) {
                var geolocation = this.geolocation = new ol.Geolocation({tracking: true});
                // listen to changes in position
                var map = this;
                geolocation.on('change', function(evt) {
                    var overlayLayer = map.getLayer('overlay').getLayers().item(0);
                    var source = overlayLayer ? overlayLayer.getSource() : map.getLayers().item(0).getSource();
                    var lnglat = geolocation.getPosition();
                    var acc = geolocation.getAccuracy();
                    if (map.fake_gps && ol.MathEx.getDistance(map.home_position, lnglat) > map.fake_gps) {
                        lnglat = [ol.MathEx.randomFromCenter(map.home_position[0], 0.001),
                            ol.MathEx.randomFromCenter(map.home_position[1], 0.001)];
                        acc = ol.MathEx.randomFromCenter(15.0, 10);
                    }
                    var gpsVal = {lnglat: lnglat, acc: acc};
                    source.setGPSMarkerAsync(gpsVal, !map._first_gps_request)
                        .then(function(result) {
                            if (!result) {
                                gpsVal = {error: 'gps_out'};
                            }
                            map._first_gps_request = false;
                            map.dispatchEvent(new ol.MapEvent('gps_result', map, gpsVal));
                        });
                });
                geolocation.on('error', function(evt) {
                    var source = map.getLayers().item(0).getSource();
                    var gpsVal = null;
                    if (map.fake_gps) {
                        var lnglat = [ol.MathEx.randomFromCenter(map.home_position[0], 0.001),
                            ol.MathEx.randomFromCenter(map.home_position[1], 0.001)];
                        var acc = ol.MathEx.randomFromCenter(15.0, 10);
                        gpsVal = {lnglat: lnglat, acc: acc};
                    }
                    source.setGPSMarkerAsync(gpsVal, !map._first_gps_request)
                        .then(function(result) {
                            if (!result) {
                                gpsVal = {error: 'gps_out'};
                            }
                            map._first_gps_request = false;
                            map.dispatchEvent(new ol.MapEvent('gps_result', map, gpsVal));
                        });
                });
            } else {
                this.geolocation.setTracking(true);
            }
        } else {
            if (this.geolocation) this.geolocation.setTracking(false);
            var source = this.getLayers().item(0).getSource();
            source.setGPSMarker();
            if (!avoidEventForOff) this.dispatchEvent(new ol.MapEvent('gps_result', map, {error: 'gps_off'}));
        }
    };

    ol.source.setupTileLoadFunction = function(target) {
        var self = target;
        target.setTileLoadFunction((function() {
            var numLoadingTiles = 0;
            var tileLoadFn = self.getTileLoadFunction();
            var tImageLoader = function(image, tile, src, fallback) {
                var tImage = tile.tImage;
                if (!tImage) {
                    tImage = document.createElement('img');
                    tImage.crossOrigin = 'Anonymous';
                    tile.tImage = tImage;
                }
                tImage.onload = tImage.onerror = function() {
                    if (tImage.width && tImage.height) {
                        var tmp = document.createElement('div');
                        tmp.innerHTML = ol.canvBase;
                        var tCanv = tmp.childNodes[0];
                        var ctx = tCanv.getContext('2d');
                        ctx.drawImage(tImage, 0, 0);
                        var dataUrl = tCanv.toDataURL();
                        image.crossOrigin=null;
                        tileLoadFn(tile, dataUrl);
                        tCanv = tImage = ctx = null;
                        if (self.cache_db) {
                            var db = self.cache_db;
                            var tx = db.transaction(['tileCache'], 'readwrite');
                            var store = tx.objectStore('tileCache');
                            var key = tile.tileCoord[0] + '-' + tile.tileCoord[1] + '-' + tile.tileCoord[2];
                            var putReq = store.put({
                                'z_x_y': key,
                                'data': dataUrl,
                                'epoch': new Date().getTime()
                            });
                            putReq.onsuccess = function() {
                            };
                            tx.oncomplete = function() {
                            };
                        }
                    } else {
                        if (fallback) {
                            tileLoadFn(tile, fallback);
                        } else {
                            tile.handleImageError_();
                        }
                    }
                    --numLoadingTiles;
                    if (numLoadingTiles === 0) {
                        // console.log('idle');
                    }
                };
                tImage.src = src;
            };
            return function(tile, src) {
                if (numLoadingTiles === 0) {
                    // console.log('loading');
                }
                ++numLoadingTiles;
                var image = tile.getImage();
                if (self.cache_db) {
                    var db = self.cache_db;
                    var tx = db.transaction(['tileCache'], 'readonly');
                    var store = tx.objectStore('tileCache');
                    var key = tile.tileCoord[0] + '-' + tile.tileCoord[1] + '-' + tile.tileCoord[2];
                    var getReq = store.get(key);
                    getReq.onsuccess = function(event) {
                        var obj = event.target.result;
                        if (!obj) {
                            tImageLoader(image, tile, src);
                        } else {
                            var cachedEpoch = obj.epoch;
                            var nowEpoch = new Date().getTime();
                            if (!cachedEpoch || nowEpoch - cachedEpoch > 86400000) {
                                tImageLoader(image, tile, src, obj.data);
                            } else {
                                var dataUrl = obj.data;
                                image.crossOrigin=null;
                                tileLoadFn(tile, dataUrl);
                            }
                        }
                    };
                    getReq.onerror = function(event) {
                        tImageLoader(image, tile, src);
                    };
                } else {
                    tImageLoader(image, tile, src);
                }
            };
        })());
    };



    return ol;
});
